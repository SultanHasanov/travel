// routes-admin.js - –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞–º–∏

// Global variables
let currentTrips = [];

// Tab switching functionality
function initializeRouteTabs() {
    const tabs = document.querySelectorAll('.auth-tab');
    
    tabs.forEach(tab => {
        tab.addEventListener('click', function() {
            const targetSection = this.getAttribute('data-section');
            
            // Remove active class from all tabs and sections
            tabs.forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
            
            // Add active class to current tab and section
            this.classList.add('active');
            document.getElementById(targetSection).classList.add('active');
            
            // Load data when switching to routes section
            if (targetSection === 'routes') {
                loadTrips();
            }
        });
    });
}

// Load trips for dropdown
async function loadTrips() {
    try {
        const token = localStorage.getItem("authToken");
        if (!token) {
            window.location.href = "/auth.html";
            return;
        }

        const response = await fetch('https://api.web95.tech/api/v1/admin/trips', {
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
            }
        });

        if (response.status === 401) {
            localStorage.removeItem("authToken");
            window.location.href = "/auth.html";
            alert("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–æ–≤');
        }
        
        const responseData = await response.json();
        
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        currentTrips = responseData.data || [];
        console.log('–¢—É—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', currentTrips);
        
        // Populate trip select in routes section
        const tripSelect = document.getElementById('tripSelect');
        if (!tripSelect) {
            console.error('–≠–ª–µ–º–µ–Ω—Ç tripSelect –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        tripSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä --</option>';
        
        // Populate trip select in modal
        const modalTripSelect = document.querySelector('#routeModal select[name="trip_id"]');
        if (modalTripSelect) {
            modalTripSelect.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä --</option>';
        }
        
        currentTrips.forEach(trip => {
            const option = document.createElement('option');
            option.value = trip.id;
            option.textContent = trip.title;
            
            tripSelect.appendChild(option.cloneNode(true));
            if (modalTripSelect) {
                modalTripSelect.appendChild(option.cloneNode(true));
            }
        });
        
        console.log('–¢—É—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Å–µ–ª–µ–∫—Ç—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', currentTrips.length);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–æ–≤:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–æ–≤: ' + error.message);
    }
}

// Load routes for selected trip
async function loadRoutesForSelectedTrip() {
    const tripSelect = document.getElementById('tripSelect');
    const tripId = tripSelect.value;
    const routesTableBody = document.getElementById('routesTableBody');
    
    if (!tripId) {
        routesTableBody.innerHTML = '<tr><td colspan="6">–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤</td></tr>';
        return;
    }
    
    try {
        const token = localStorage.getItem("authToken");
        if (!token) {
            window.location.href = "/auth.html";
            return;
        }

        const response = await fetch(`https://api.web95.tech/api/v1/trips/${tripId}/routes`, {
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
            }
        });

        if (response.status === 401) {
            localStorage.removeItem("authToken");
            window.location.href = "/auth.html";
            alert("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
        }
        
        const responseData = await response.json();
        console.log('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤:', responseData);
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ - –±–µ—Ä–µ–º responseData.data.route
        const routes = responseData.data?.route || [];
        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:', routes);
        
        routesTableBody.innerHTML = '';
        
        if (routes.length === 0) {
            routesTableBody.innerHTML = '<tr><td colspan="6">–ú–∞—Ä—à—Ä—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</td></tr>';
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é (index) —Ç–∞–∫ –∫–∞–∫ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–ª—è position
        routes.forEach((route, index) => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${index + 1}</td>
                <td>${route.city || '-'}</td>
                <td>${route.duration || '-'}</td>
                <td>${route.stop_time || '-'}</td>
                <td>${route.transport || '-'}</td>
                <td class="admin-table__actions">
                    <button class="admin-table__btn admin-table__btn--edit" onclick="editRoute(${index}, ${tripId})">
                        ‚úèÔ∏è
                    </button>
                    <button class="admin-table__btn admin-table__btn--delete" onclick="deleteRoute(${index}, ${tripId})">
                        üóëÔ∏è
                    </button>
                </td>
            `;
            routesTableBody.appendChild(row);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
        const totalDuration = responseData.data?.total_duration;
        if (totalDuration) {
            const infoRow = document.createElement('tr');
            infoRow.innerHTML = `<td colspan="6" style="background: #f8f9fa; font-weight: bold;">–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${totalDuration}</td>`;
            routesTableBody.appendChild(infoRow);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', error);
        routesTableBody.innerHTML = '<tr><td colspan="6">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ' + error.message + '</td></tr>';
    }
}

// Submit route form
async function submitRouteForm(event) {
    event.preventDefault();
    
    const token = localStorage.getItem("authToken");
    if (!token) {
        window.location.href = "/auth.html";
        return;
    }

    const form = event.target;
    const formData = new FormData(form);
    const tripId = formData.get('trip_id');
    
    const routeData = {
        routes: [{
            city: formData.get('city'),
            duration: formData.get('duration'),
            position: parseInt(formData.get('position')),
            stop_time: formData.get('stop_time'),
            transport: formData.get('transport')
        }]
    };
    
    try {
        const response = await fetch(`https://api.web95.tech/api/v1/admin/trips/${tripId}/routes/batch`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(routeData)
        });

        if (response.status === 401) {
            localStorage.removeItem("authToken");
            window.location.href = "/auth.html";
            alert("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
        }
        
        alert('–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        closeModal('routeModal');
        form.reset();
        
        // Reload routes if the same trip is selected
        const selectedTripId = document.getElementById('tripSelect').value;
        if (selectedTripId === tripId) {
            loadRoutesForSelectedTrip();
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: ' + error.message);
    }
}

// Edit route
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
async function editRoute(routeIndex, tripId) {
    try {
        const token = localStorage.getItem("authToken");
        if (!token) {
            window.location.href = "/auth.html";
            return;
        }

        const response = await fetch(`https://api.web95.tech/api/v1/trips/${tripId}/routes`, {
            headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
            }
        });

        if (response.status === 401) {
            localStorage.removeItem("authToken");
            window.location.href = "/auth.html";
            return;
        }

        const responseData = await response.json();
        const routes = responseData.data?.route || [];
        const routeData = routes[routeIndex];

        if (!routeData) {
            alert('–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const modal = document.getElementById('routeModal');
        const form = modal.querySelector('form');
        
        form.querySelector('select[name="trip_id"]').value = tripId;
        form.querySelector('input[name="city"]').value = routeData.city || "";
        form.querySelector('input[name="duration"]').value = routeData.duration || "";
        form.querySelector('input[name="position"]').value = routeIndex;
        form.querySelector('input[name="stop_time"]').value = routeData.stop_time || "";
        form.querySelector('input[name="transport"]').value = routeData.transport || "";
        
        // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        modal.querySelector('.modal-title').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç';
        form.onsubmit = function(e) { 
            e.preventDefault();
            updateRoute(e, tripId, routeIndex); 
        };
        
        openModal('routeModal');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞');
    }
}

async function updateRoute(event, tripId, routeIndex) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
    // –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤
}

async function deleteRoute(routeIndex, tripId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç?')) {
        return;
    }
    
    // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    alert('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤. –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç API.');
}
// Submit edit route form
async function submitEditRouteForm(event, routeId, tripId) {
    event.preventDefault();
    
    const token = localStorage.getItem("authToken");
    if (!token) {
        window.location.href = "/auth.html";
        return;
    }

    const form = event.target;
    const formData = new FormData(form);
    
    const routeData = {
        city: formData.get('city'),
        duration: formData.get('duration'),
        position: parseInt(formData.get('position')),
        stop_time: formData.get('stop_time'),
        transport: formData.get('transport')
    };
    
    try {
        const response = await fetch(`https://api.web95.tech/api/v1/admin/trips/${tripId}/routes/${routeId}`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(routeData)
        });

        if (response.status === 401) {
            localStorage.removeItem("authToken");
            window.location.href = "/auth.html";
            alert("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
        }
        
        alert('–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        closeModal('routeModal');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        const modal = document.getElementById('routeModal');
        const form = modal.querySelector('form');
        modal.querySelector('.modal-title').textContent = '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç';
        form.onsubmit = submitRouteForm;
        form.reset();
        
        // Reload routes
        loadRoutesForSelectedTrip();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: ' + error.message);
    }
}

// Delete route
async function deleteRoute(routeId, tripId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç?')) {
        return;
    }
    
    const token = localStorage.getItem("authToken");
    if (!token) {
        window.location.href = "/auth.html";
        return;
    }
    
    try {
        const response = await fetch(`https://api.web95.tech/api/v1/admin/trips/${tripId}/routes/${routeId}`, {
            method: 'DELETE',
            headers: {
                'Authorization': `Bearer ${token}`,
            }
        });

        if (response.status === 401) {
            localStorage.removeItem("authToken");
            window.location.href = "/auth.html";
            alert("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞');
        }
        
        alert('–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        loadRoutesForSelectedTrip();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: ' + error.message);
    }
}

// Open route modal with trip selection
function openRouteModal() {
    loadTrips().then(() => {
        openModal('routeModal');
    });
}

// Initialize routes functionality when DOM is loaded
document.addEventListener("DOMContentLoaded", function() {
    initializeRouteTabs();
    
    // Load trips if on routes section
    if (document.getElementById('routes') && document.getElementById('routes').classList.contains('active')) {
        loadTrips();
    }
});